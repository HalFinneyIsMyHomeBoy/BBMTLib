// worker.js

importScripts("wasm_exec.js");

self.onmessage = async (event) => {
  if (event.data.command === "start") {
    try {
      const go = new Go();
      const wasmModule = await WebAssembly.instantiateStreaming(
        fetch("bbmtlib.wasm"),
        go.importObject
      );
      go.run(wasmModule.instance);

      // Schedule the heavy function with high priority
      const result = await scheduler.postTask(() => self.preParams(), {
        priority: "user-blocking",
      });

      self.postMessage({ status: "complete", result: result });
    } catch (error) {
      self.postMessage({ status: "error", error: error.message });
    }
  }

  if (event.data.command === "keygen") {
    try {
      const go = new Go();
      const wasmModule = await WebAssembly.instantiateStreaming(
        fetch("bbmtlib.wasm"),
        go.importObject
      );
      go.run(wasmModule.instance);
      // Schedule the heavy function with high priority
      const result = await scheduler.postTask(
        () =>
          self.nostrJoinKeygen(
            event.data.relay,
            event.data.localNsec,
            event.data.localNpub,
            event.data.partyNpubs,
            event.data.ppm,
            event.data.sessionID,
            event.data.sessionKey,
            event.data.chainCode,
            event.data.verbose
          ),
        {
          priority: "user-blocking",
        }
      );

      self.postMessage({ status: "complete", result: result });
    } catch (error) {
      self.postMessage({ status: "error", error: error.message });
    }
  }

  if (event.data.command === "nostrConnectRelay") {
    try {
      const go = new Go();
      const wasmModule = await WebAssembly.instantiateStreaming(
        fetch("bbmtlib.wasm"),
        go.importObject
      );
      go.run(wasmModule.instance);

      // Schedule the heavy function with high priority
      const result = await self.nostrConnectRelay(
        event.data.relay,
        event.data.localNsec,
        event.data.localNpub
      );

      self.postMessage({ status: "complete", result: result });
    } catch (error) {
      self.postMessage({ status: "error", error: error.message });
    }
  }

  if (event.data.command === "local_keygen") {
    try {
      const go = new Go();
      const wasmModule = await WebAssembly.instantiateStreaming(
        fetch("bbmtlib.wasm"),
        go.importObject
      );
      go.run(wasmModule.instance);

      const server = "http://0.0.0.0:55055";
      const session =
        "f37ef33ae5620e93b6495b0f2b7ece781a8478abd978df1ceab4a999e0d9a6c8";
      const chainCode =
        "f37ef33ae5620e93b6495b0f2b7ece781a8478abd978df1ceab4a999e0d9a6c8";
      const party = "peer3";
      const parties = "peer1,peer2,peer3";

      const sessionKey =
        "f37ef33ae5620e93b6495b0f2b7ece781a8478abd978df1ceab4a999e0d9a6c8";

      const ppm = `{"PaillierSK":{"N":26559735838229302912282332119695933684236488433042895405637808122131391715540619594107633230020203704186290432335444748383590822320324844311113324107194818855415792809328869636585916785198144899804277255042138324439163767516348626366848798744617547274607315154702679784592748724190502826275714257218677013460303955013309266442578617737671395457417456174149838724587844765760811557544716172717201112290357095671474849773901320830153197991080525833453357251832994791476013145255067277448523284046911400927080120164232403217407405736971691663558617583514548586217007720127825504244390697625657129889420299706039014230097,"LambdaN":13279867919114651456141166059847966842118244216521447702818904061065695857770309797053816615010101852093145216167722374191795411160162422155556662053597409427707896404664434818292958392599072449902138627521069162219581883758174313183424399372308773637303657577351339892296374362095251413137857128609338506729988677699444430863088232421339677560110389984490979632054916733063130570819266151243810059297691682665264044658981012512944597972157047250609651261523784286879471783162738156271048288842089889080394413008484338660747498795448732166411567382014387202421326401146940569383885876252637315465130781666075752982578,"PhiN":26559735838229302912282332119695933684236488433042895405637808122131391715540619594107633230020203704186290432335444748383590822320324844311113324107194818855415792809328869636585916785198144899804277255042138324439163767516348626366848798744617547274607315154702679784592748724190502826275714257218677013459977355398888861726176464842679355120220779968981959264109833466126261141638532302487620118595383365330528089317962025025889195944314094501219302523047568573758943566325476312542096577684179778160788826016968677321494997590897464332823134764028774404842652802293881138767771752505274630930261563332151505965156,"P":173648294861060099948647924251062910980644451876318300466504247509701897820817161101641710701398181286064151216211310069666644810728957841266149470159597449444645250015696788625755027558625681628381343564667021847523611167606117114018638161617320910762040925872566999225701661587910380922214953039302100685559,"Q":152951319559344616453504970740977426216031753291561160011507052124848518085366709127939282993575549054882609239727985734597357236037473490967905258625828768272424328913894176280671678804105941137909950582596704048388796978468110216716844657868453270612313991961377366250917283532472118036943783334585407579383},"NTildei":25025685163686309115325039800430524975054140424714318738366990487011743161887998026127051321113407070395037876065857241156564682289525288619440547227419888813092628686063893579560498258875386476371816352834204146304853186016383310131607253283275684285769512406842027188545333869156950603827862312249427842358966245651094759356221692027031087151519624158821369205039772975023678704352640909745484484725955691499933922261477815944344495263319967617271033826570463960137902285965596979118316361728930717793115002830898205738682420462397095764737480344184264742838754372879261159681535498087303631775251572431452201098521,"H1i":10394287921604821988836717836610989070590914688685776657460253787029355024965513376033934120051253513939019584368986791461269625713789799995291583561735475541669313842951907254028759109023102842357592870833499234679494708495174321239009804636508292918075258240432858067638022475973196946979460160636726468247317153453290099654614379069548824268182194324825844895291267659899730198423781696433972348234122681447935003970612681616906570148651136176044517338535010710784758205113001125368820725366753990658486180620262195766627540916532004850133636259580778068138725040040024278226847434243940256702674779460956699835524,"H2i":4039464370537679847483778314252783013647699076310897876380854016814409249346843709598967837044344236410495477114802800472619067757350273899026289945774062985241248250204876158605445934069337125340664897333745761852629957146333366544550585414707828055737283009763194163368516501455268214956385525007709468693437907375913689973842422475018951066259009269695123577427269112128201668418521176594109516784197918934085079372357059995840813164660884520773863127472111020595716698098477297842946476754076716096214834827433317635341446139217599392065489116128251825147138166297485410209597377322347985132039480144066290741670,"Alpha":22371687223519478194888417702303519898124533405429313830540368174176080121545348559673669909633696490696634245864442951599146640305523659790653407521502399409778246043388713484306671948976958340440119888280654104008241463849552462054437114512445287913736663778877584759440204928298687129813749229878761519188601462660472657121437095588080950192649791064701307904441949256447333581343796842484381678666726952024767422945936995627439764019500528691328665029421507552908041594770098900681230061498885139610439578427682521364445176987872115329965197510545630221550057788040003727501967118974223858369742896978712014853200,"Beta":754555310824578737769865700459724138473278932937798179136897828410613954884937447567848484325125780748187920117105148009374409560899891795868463169396289668563147304172160464307377296507499352360030861155648852774728235228045482452163229970275550269649952240895811050575152622125614909293307818040333668650743610863323362352450785029288343029041360554848391131058665386594875502652533708247111578919087272738435309082928947123362995033572052658578269681583507081404668116195757126694335810619226961506205574214665108331129028419660283788866190776943661885761981614169313648788121791026811094877241706661736069278158,"P":88606403202162442845112203925965821852081308353788856076833917266072025111396251688513386652220298383012276982806756403776454311810148331552953255480203258224845731445288429200988753922213307300419221855084096147438871572907156778263818224281356130244395137783294222485951762635646518040590115973370679492899,"Q":70609132803270013163126017687516341677349659473861743527726364021779221277295806764846021972469901731984631041062321711582758506464517218240172424254383148562112325686636195278053986937628411308065222050597071546636372795019300466055527563016040141138776546309937373261511811729449476139925041901365316229839}`;

      // Schedule the heavy function with high priority
      const result = await scheduler.postTask(
        () =>
          self.httpJoinKeygen(
            server,
            session,
            chainCode,
            party,
            parties,
            sessionKey,
            ppm,
          ),
        {
          priority: "user-blocking",
        }
      );

      self.postMessage({ status: "complete", result: result });
    } catch (error) {
      self.postMessage({ status: "error", error: error.message });
    }
  }
};
